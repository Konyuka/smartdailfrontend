{"remainingRequest":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\TAILTASK\\USER\\src\\components\\others\\TransferCall.vue?vue&type=template&id=3be7e056&scoped=true&","dependencies":[{"path":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\src\\components\\others\\TransferCall.vue","mtime":1608101587090},{"path":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\TAILTASK\\USER\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}